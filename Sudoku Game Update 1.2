### This new update includes a timer that will record how fast the user solves the puzzle and more bug fixes.

import numpy as np
import random
import datetime

start_time = None

def start_game():
    global start_time
    start_time = datetime.datetime.now()
    print("Game started at:", start_time)

def end_game():
    global start_time
    if start_time is not None:
        end_time = datetime.datetime.now()
        total_time = end_time - start_time
        print("Game ended at:", end_time)
        print("Total time played:", total_time)
        start_time = None
    else:
        print("Game has not been started yet.")

def generateBoard(board):
    for i in range(9):
        for j in range(9):
            if j==0:
                print("|",end='')
            if j!=8:
                print(board[i,j],end=' ')
            else:
                print(board[i,j],end='')
            if (j+1)%3==0:
                print("|",end='')
        if (i+1)%3==0:
            print("\n---------------------",end='')
        print()

def emptyCell(board):
    for i in range(9):
        for j in range(9):
            if board[i,j]==0:
                row=i
                col=j
                Fill_Chk=1
                res=np.array([row,col,Fill_Chk],dtype="int8")
                return res
    res=np.array([-1,-1,0])
    return res

def isValid(board,row,col,num):
    row_start=(row//3)*3
    col_start=(col//3)*3
    if num in board[:,col] or num in board[row,:]:
        return False
    if num in board[row_start:row_start+3,col_start:col_start+3]:
        return False
    return True

def generatePuzzle(board,difficulty):
    count,done=0,False
    if difficulty is "Easy":
        print("Easy Difficulty Puzzle Generating...\n\n")
        upper_limit=35
    elif difficulty is "Medium":
        print("Medium Difficulty Puzzle Generating...\n\n")
        upper_limit=41
    else:
        print("Hard Difficulty Puzzle Generating...\n\n")
        upper_limit=47
    while True:   
        i=random.randint(0,8)
        j=random.randint(0,8)
        if count<=upper_limit:
            if board[i,j]!=0:
                not_check=board[i,j]
                board[i,j]=0
                board_copy=board
                if sudokuSolving(board_copy,not_check):
                    board[i,j]=not_check
                    continue
                row_start=(i//3)*3
                col_start=(j//3)*3
                if difficulty is "Easy":
                    if np.count_nonzero(board[row_start:row_start+3,col_start:col_start+3])<5:
                        board[i,j]=not_check
                        continue
                elif difficulty is "Medium":
                    if np.count_nonzero(board[row_start:row_start+3,col_start:col_start+3])<4:
                        board[i,j]=not_check
                        continue
                else:
                    if np.count_nonzero(board[row_start:row_start+3,col_start:col_start+3])<3:
                        board[i,j]=not_check
                        continue
                count+=1
        else:
            done=True
            break

def Play_Sudoku(solvedBoard,unsolvedBoard):
    while True:    
        row=int(input("Enter the row of the empty cell you want to fill:")) - 1
        col=int(input("Enter the column of the empty cell you want to fill:")) - 1
        number_check=int(input("Enter the number (or press 10 to exit):"))
        if number_check!=10:
            if unsolvedBoard[row,col]==0:
                print(solvedBoard[row,col])
                if solvedBoard[row,col]==number_check:
                    print("Correct!")
                    unsolvedBoard[row,col]=number_check
                    generateBoard(unsolvedBoard)
                else:
                    print("Incorrect!")
                    generateBoard(unsolvedBoard)
            else:
                print("That box is already correctly filled!")
            if np.array_equal(solvedBoard,unsolvedBoard):
                print("Congrats on solving the sudoku puzzle!")
                break
        else:
            print("\nThe solved board is:")
            generateBoard(solvedBoard)
            print("\nThank you for playing!")
            return

def sudokuSolving(board,not_check):
    x=emptyCell(board)
    if x[2]==0:
        return True
    else:
        row=x[0]
        col=x[1]
        for i in np.random.permutation(10):
            if i!=0 and i!=not_check:
                if isValid(board,row,col,i):
                    board[row,col]=i
                    if sudokuSolving(board,not_check):
                        return True
                    board[row,col]=0 
    return False

def main():
    start_game()
    ch=int(input("Hello! Choose the level of difficulty-\n1.Easy\n2.Medium\n3.Hard\nYour choice:"))
    if ch==1:
        difficulty="Easy"
    elif ch==2:
        difficulty="Medium"
    else:
        difficulty="Hard"
    board=np.zeros((9,9),dtype="int8")
    if sudokuSolving(board,-1):
        solvedBoard=board.copy()
        print("\n\nThe unsolved puzzle is:\n")
        generatePuzzle(board,difficulty)
        generateBoard(board)
        unsolvedBoard=board.copy()
        Play_Sudoku(solvedBoard,unsolvedBoard)
    else:
        print("The board is not possible!")
    return
    end_game()

if __name__=="__main__":
    main()
